// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: yggdrasil.flex

package yggdrasil.psi;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static yggdrasil.psi.YggdrasilTypes.*;


public class _YggdrasilLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\2\u1f00\1\u2200\1\u2300"+
    "\2\u1f00\31\u0100\1\u2400\121\u0100\1\u2500\4\u0100\1\u2600\1\u0100"+
    "\1\u2700\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\53\u0100\1\u2d00"+
    "\41\u1f00\1\u0100\1\u2e00\1\u2f00\1\u3000\1\u3100\1\u3200\1\u3300"+
    "\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u0100\1\u3a00"+
    "\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u1f00\1\u4100"+
    "\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800\1\u4900"+
    "\1\u4a00\1\u4b00\1\u4c00\1\u1f00\1\u4d00\1\u4e00\1\u4f00\1\u1f00"+
    "\3\u0100\1\u5000\1\u5100\1\u5200\12\u1f00\4\u0100\1\u5300\17\u1f00"+
    "\2\u0100\1\u5400\41\u1f00\2\u0100\1\u5500\1\u5600\2\u1f00\1\u5700"+
    "\1\u5800\27\u0100\1\u5900\2\u0100\1\u5a00\45\u1f00\1\u0100\1\u5b00"+
    "\1\u5c00\11\u1f00\1\u5d00\24\u1f00\1\u5e00\1\u5f00\1\u1f00\1\u6000"+
    "\1\u6100\1\u6200\1\u6300\2\u1f00\1\u6400\5\u1f00\1\u6500\1\u6600"+
    "\1\u6700\5\u1f00\1\u6800\1\u6900\4\u1f00\1\u6a00\21\u1f00\246\u0100"+
    "\1\u6b00\20\u0100\1\u6c00\1\u6d00\25\u0100\1\u6e00\34\u0100\1\u6f00"+
    "\14\u1f00\2\u0100\1\u7000\u0b06\u1f00\1\u7100\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\1\1\2\22\0\1\1\3\0"+
    "\1\3\3\0\1\4\1\5\1\6\1\0\1\7\1\10"+
    "\1\11\1\12\12\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\0\1\21\32\22\1\23\1\0\1\24\1\25\1\22"+
    "\1\0\1\26\1\27\1\30\1\22\1\31\1\32\1\33"+
    "\1\22\1\34\2\22\1\35\1\36\1\37\1\40\1\41"+
    "\1\22\1\42\1\43\1\44\1\45\3\22\1\46\1\22"+
    "\1\47\1\0\1\50\7\0\1\1\32\0\1\1\11\0"+
    "\1\22\12\0\1\22\1\0\1\13\2\0\1\22\5\0"+
    "\27\22\1\0\37\22\1\0\u01ca\22\4\0\14\22\16\0"+
    "\5\22\7\0\1\22\1\0\1\22\21\0\160\13\5\22"+
    "\1\0\2\22\3\0\3\22\1\0\1\22\6\0\1\22"+
    "\1\13\3\22\1\0\1\22\1\0\24\22\1\0\123\22"+
    "\1\0\213\22\1\0\5\13\2\0\246\22\1\0\46\22"+
    "\2\0\1\22\6\0\51\22\10\0\55\13\1\0\1\13"+
    "\1\0\2\13\1\0\2\13\1\0\1\13\10\0\33\22"+
    "\4\0\4\22\35\0\13\13\5\0\53\22\37\13\4\0"+
    "\2\22\1\13\143\22\1\0\1\22\7\13\2\0\6\13"+
    "\2\22\2\13\1\0\4\13\2\22\12\13\3\22\2\0"+
    "\1\22\20\0\1\22\1\13\36\22\33\13\2\0\131\22"+
    "\13\13\1\22\16\0\12\13\41\22\11\13\2\22\4\0"+
    "\1\22\2\0\1\13\2\0\26\22\4\13\1\22\11\13"+
    "\1\22\3\13\1\22\5\13\22\0\31\22\3\13\4\0"+
    "\13\22\65\0\25\22\1\0\10\22\25\0\17\13\1\0"+
    "\41\13\66\22\3\13\1\22\22\13\1\22\7\13\12\22"+
    "\2\13\2\0\12\13\1\0\20\22\3\13\1\0\10\22"+
    "\2\0\2\22\2\0\26\22\1\0\7\22\1\0\1\22"+
    "\3\0\4\22\2\0\1\13\1\22\7\13\2\0\2\13"+
    "\2\0\3\13\1\22\10\0\1\13\4\0\2\22\1\0"+
    "\3\22\2\13\2\0\12\13\2\22\12\0\1\22\1\0"+
    "\1\13\2\0\3\13\1\0\6\22\4\0\2\22\2\0"+
    "\26\22\1\0\7\22\1\0\2\22\1\0\2\22\1\0"+
    "\2\22\2\0\1\13\1\0\5\13\4\0\2\13\2\0"+
    "\3\13\3\0\1\13\7\0\4\22\1\0\1\22\7\0"+
    "\14\13\3\22\1\13\13\0\3\13\1\0\11\22\1\0"+
    "\3\22\1\0\26\22\1\0\7\22\1\0\2\22\1\0"+
    "\5\22\2\0\1\13\1\22\10\13\1\0\3\13\1\0"+
    "\3\13\2\0\1\22\17\0\2\22\2\13\2\0\12\13"+
    "\11\0\1\22\6\13\1\0\3\13\1\0\10\22\2\0"+
    "\2\22\2\0\26\22\1\0\7\22\1\0\2\22\1\0"+
    "\5\22\2\0\1\13\1\22\7\13\2\0\2\13\2\0"+
    "\3\13\10\0\2\13\4\0\2\22\1\0\3\22\2\13"+
    "\2\0\12\13\1\0\1\22\20\0\1\13\1\22\1\0"+
    "\6\22\3\0\3\22\1\0\4\22\3\0\2\22\1\0"+
    "\1\22\1\0\2\22\3\0\2\22\3\0\3\22\3\0"+
    "\14\22\4\0\5\13\3\0\3\13\1\0\4\13\2\0"+
    "\1\22\6\0\1\13\16\0\12\13\20\0\5\13\10\22"+
    "\1\0\3\22\1\0\27\22\1\0\20\22\3\0\1\22"+
    "\7\13\1\0\3\13\1\0\4\13\7\0\2\13\1\0"+
    "\3\22\5\0\2\22\2\13\2\0\12\13\20\0\1\22"+
    "\3\13\1\0\10\22\1\0\3\22\1\0\27\22\1\0"+
    "\12\22\1\0\5\22\2\0\1\13\1\22\7\13\1\0"+
    "\3\13\1\0\4\13\7\0\2\13\7\0\1\22\1\0"+
    "\2\22\2\13\2\0\12\13\1\0\2\22\15\0\4\13"+
    "\1\0\10\22\1\0\3\22\1\0\51\22\2\13\1\22"+
    "\7\13\1\0\3\13\1\0\4\13\1\22\5\0\3\22"+
    "\1\13\7\0\3\22\2\13\2\0\12\13\12\0\6\22"+
    "\2\0\2\13\1\0\22\22\3\0\30\22\1\0\11\22"+
    "\1\0\1\22\2\0\7\22\3\0\1\13\4\0\6\13"+
    "\1\0\1\13\1\0\10\13\6\0\12\13\2\0\2\13"+
    "\15\0\60\22\1\13\1\22\10\13\5\0\7\22\10\13"+
    "\1\0\12\13\47\0\2\22\1\0\1\22\1\0\5\22"+
    "\1\0\30\22\1\0\1\22\1\0\12\22\1\13\1\22"+
    "\12\13\1\22\2\0\5\22\1\0\1\22\1\0\6\13"+
    "\2\0\12\13\2\0\4\22\40\0\1\22\27\0\2\13"+
    "\6\0\12\13\13\0\1\13\1\0\1\13\1\0\1\13"+
    "\4\0\2\13\10\22\1\0\44\22\4\0\24\13\1\0"+
    "\2\13\5\22\13\13\1\0\44\13\11\0\1\13\71\0"+
    "\53\22\24\13\1\22\12\13\6\0\6\22\4\13\4\22"+
    "\3\13\1\22\3\13\2\22\7\13\3\22\4\13\15\22"+
    "\14\13\1\22\17\13\2\0\46\22\1\0\1\22\5\0"+
    "\1\22\2\0\53\22\1\0\115\22\1\0\4\22\2\0"+
    "\7\22\1\0\1\22\1\0\4\22\2\0\51\22\1\0"+
    "\4\22\2\0\41\22\1\0\4\22\2\0\7\22\1\0"+
    "\1\22\1\0\4\22\2\0\17\22\1\0\71\22\1\0"+
    "\4\22\2\0\103\22\2\0\3\13\11\0\11\13\16\0"+
    "\20\22\20\0\126\22\2\0\6\22\3\0\u016c\22\2\0"+
    "\21\22\1\1\32\22\5\0\113\22\3\0\13\22\7\0"+
    "\15\22\1\0\4\22\3\13\13\0\22\22\3\13\13\0"+
    "\22\22\2\13\14\0\15\22\1\0\3\22\1\0\2\13"+
    "\14\0\64\22\40\13\3\0\1\22\4\0\1\22\1\13"+
    "\2\0\12\13\41\0\3\13\2\0\12\13\6\0\131\22"+
    "\7\0\51\22\1\13\1\22\5\0\106\22\12\0\37\22"+
    "\1\0\14\13\4\0\14\13\12\0\12\13\36\22\2\0"+
    "\5\22\13\0\54\22\4\0\32\22\6\0\13\13\45\0"+
    "\27\22\5\13\4\0\65\22\12\13\1\0\35\13\2\0"+
    "\13\13\6\0\12\13\15\0\1\22\10\0\16\13\102\0"+
    "\5\13\57\22\21\13\7\22\4\0\12\13\21\0\11\13"+
    "\14\0\3\13\36\22\15\13\2\22\12\13\54\22\16\13"+
    "\14\0\44\22\24\13\10\0\12\13\3\0\3\22\12\13"+
    "\44\22\2\0\11\22\7\0\53\22\2\0\3\22\20\0"+
    "\3\13\1\0\25\13\4\22\1\13\6\22\1\13\2\22"+
    "\3\13\1\22\5\0\300\22\72\13\1\0\5\13\26\22"+
    "\2\0\6\22\2\0\46\22\2\0\6\22\2\0\10\22"+
    "\1\0\1\22\1\0\1\22\1\0\1\22\1\0\37\22"+
    "\2\0\65\22\1\0\7\22\1\0\1\22\3\0\3\22"+
    "\1\0\7\22\3\0\4\22\2\0\6\22\4\0\15\22"+
    "\5\0\3\22\1\0\7\22\3\0\13\1\35\0\2\1"+
    "\5\0\1\1\17\0\2\13\23\0\1\13\12\0\1\1"+
    "\21\0\1\22\15\0\1\22\20\0\15\22\63\0\15\13"+
    "\4\0\1\13\3\0\14\13\21\0\1\22\4\0\1\22"+
    "\2\0\12\22\1\0\1\22\2\0\6\22\6\0\1\22"+
    "\1\0\1\22\1\0\1\22\1\0\20\22\2\0\4\22"+
    "\5\0\5\22\4\0\1\22\21\0\51\22\u0177\0\57\22"+
    "\1\0\57\22\1\0\205\22\6\0\4\22\3\13\2\22"+
    "\14\0\46\22\1\0\1\22\5\0\1\22\2\0\70\22"+
    "\7\0\1\22\17\0\1\13\27\22\11\0\7\22\1\0"+
    "\7\22\1\0\7\22\1\0\7\22\1\0\7\22\1\0"+
    "\7\22\1\0\7\22\1\0\7\22\1\0\40\13\1\1"+
    "\4\0\3\22\31\0\11\22\6\13\1\0\5\22\2\0"+
    "\5\22\4\0\126\22\2\0\2\13\2\0\3\22\1\0"+
    "\132\22\1\0\4\22\5\0\53\22\1\0\136\22\21\0"+
    "\33\22\65\0\306\22\112\0\360\22\20\0\215\22\103\0"+
    "\56\22\2\0\15\22\3\0\20\22\12\13\2\22\24\0"+
    "\57\22\1\13\4\0\12\13\1\0\37\22\2\13\120\22"+
    "\2\13\45\0\11\22\2\0\147\22\2\0\65\22\2\0"+
    "\5\22\60\0\13\22\1\13\3\22\1\13\4\22\1\13"+
    "\27\22\5\13\30\0\64\22\14\0\2\13\62\22\22\13"+
    "\12\0\12\13\6\0\22\13\6\22\3\0\1\22\1\0"+
    "\2\22\13\13\34\22\10\13\2\0\27\22\15\13\14\0"+
    "\35\22\3\0\4\13\57\22\16\13\16\0\1\22\12\13"+
    "\6\0\5\22\1\13\12\22\12\13\5\22\1\0\51\22"+
    "\16\13\11\0\3\22\1\13\10\22\2\13\2\0\12\13"+
    "\6\0\27\22\3\0\1\22\3\13\62\22\1\13\1\22"+
    "\3\13\2\22\2\13\5\22\2\13\1\22\1\13\1\22"+
    "\30\0\3\22\2\0\13\22\5\13\2\0\3\22\2\13"+
    "\12\0\6\22\2\0\6\22\2\0\6\22\11\0\7\22"+
    "\1\0\7\22\1\0\53\22\1\0\14\22\10\0\163\22"+
    "\10\13\1\0\2\13\2\0\12\13\6\0\244\22\14\0"+
    "\27\22\4\0\61\22\4\0\156\22\2\0\152\22\46\0"+
    "\7\22\14\0\5\22\5\0\1\22\1\13\12\22\1\0"+
    "\15\22\1\0\5\22\1\0\1\22\1\0\2\22\1\0"+
    "\2\22\1\0\154\22\41\0\213\22\6\0\332\22\22\0"+
    "\100\22\2\0\66\22\50\0\12\22\6\0\20\13\20\0"+
    "\20\13\3\0\2\13\30\0\3\13\41\0\1\22\1\0"+
    "\1\22\3\0\1\22\1\0\1\22\1\0\1\22\1\0"+
    "\1\22\1\0\176\22\23\0\12\13\7\0\32\22\4\0"+
    "\1\13\1\0\32\22\13\0\70\22\2\13\37\22\3\0"+
    "\6\22\2\0\6\22\2\0\6\22\2\0\3\22\43\0"+
    "\14\22\1\0\32\22\1\0\23\22\1\0\2\22\1\0"+
    "\17\22\2\0\16\22\42\0\173\22\105\0\65\22\210\0"+
    "\1\13\202\0\35\22\3\0\61\22\17\0\1\13\37\0"+
    "\40\22\15\0\36\22\5\0\46\22\5\13\5\0\36\22"+
    "\2\0\44\22\4\0\10\22\1\0\5\22\52\0\236\22"+
    "\2\0\12\13\6\0\44\22\4\0\44\22\4\0\50\22"+
    "\10\0\64\22\234\0\67\22\11\0\26\22\12\0\10\22"+
    "\230\0\6\22\2\0\1\22\1\0\54\22\1\0\2\22"+
    "\3\0\1\22\2\0\27\22\12\0\27\22\11\0\37\22"+
    "\101\0\23\22\1\0\2\22\12\0\26\22\12\0\32\22"+
    "\106\0\70\22\6\0\2\22\100\0\1\22\3\13\1\0"+
    "\2\13\5\0\4\13\4\22\1\0\3\22\1\0\35\22"+
    "\2\0\3\13\4\0\1\13\40\0\35\22\3\0\35\22"+
    "\43\0\10\22\1\0\34\22\2\13\31\0\66\22\12\0"+
    "\26\22\12\0\23\22\15\0\22\22\156\0\111\22\67\0"+
    "\63\22\15\0\63\22\15\0\44\22\4\13\10\0\12\13"+
    "\306\0\35\22\12\0\1\22\10\0\26\22\13\13\217\0"+
    "\27\22\11\0\3\13\65\22\17\13\37\0\12\13\17\0"+
    "\4\13\55\22\13\13\25\0\31\22\7\0\12\13\6\0"+
    "\3\13\44\22\16\13\1\0\12\13\4\0\1\22\2\13"+
    "\11\0\43\22\1\13\2\0\1\22\11\0\3\13\60\22"+
    "\16\13\4\22\4\0\4\13\3\0\12\13\1\22\1\0"+
    "\1\22\43\0\22\22\1\0\31\22\14\13\6\0\1\13"+
    "\101\0\7\22\1\0\1\22\1\0\4\22\1\0\17\22"+
    "\1\0\12\22\7\0\57\22\14\13\5\0\12\13\6\0"+
    "\4\13\1\0\10\22\2\0\2\22\2\0\26\22\1\0"+
    "\7\22\1\0\2\22\1\0\5\22\1\0\2\13\1\22"+
    "\7\13\2\0\2\13\2\0\3\13\2\0\1\22\6\0"+
    "\1\13\5\0\5\22\2\13\2\0\7\13\3\0\5\13"+
    "\213\0\65\22\22\13\4\22\5\0\12\13\4\0\1\13"+
    "\1\22\40\0\60\22\24\13\2\22\1\0\1\22\10\0"+
    "\12\13\246\0\57\22\7\13\2\0\11\13\27\0\4\22"+
    "\2\13\42\0\60\22\21\13\3\0\1\22\13\0\12\13"+
    "\46\0\53\22\15\13\1\22\7\0\12\13\66\0\33\22"+
    "\2\0\17\13\4\0\12\13\306\0\54\22\17\13\145\0"+
    "\100\22\12\13\25\0\1\22\240\0\10\22\2\0\47\22"+
    "\7\13\2\0\7\13\1\22\1\0\1\22\1\13\33\0"+
    "\1\22\12\13\50\22\7\13\1\22\4\13\10\0\1\13"+
    "\10\0\1\22\13\13\56\22\20\13\3\0\1\22\42\0"+
    "\71\22\7\0\11\22\1\0\45\22\10\13\1\0\10\13"+
    "\1\22\17\0\12\13\30\0\36\22\2\0\26\13\1\0"+
    "\16\13\111\0\7\22\1\0\2\22\1\0\46\22\6\13"+
    "\3\0\1\13\1\0\2\13\1\0\7\13\1\22\1\13"+
    "\10\0\12\13\6\0\6\22\1\0\2\22\1\0\40\22"+
    "\5\13\1\0\2\13\1\0\5\13\1\22\7\0\12\13"+
    "\u0136\0\23\22\4\13\11\0\232\22\146\0\157\22\21\0"+
    "\304\22\274\0\57\22\321\0\107\22\271\0\71\22\7\0"+
    "\37\22\1\0\12\13\146\0\36\22\2\0\5\13\13\0"+
    "\60\22\7\13\11\0\4\22\14\0\12\13\11\0\25\22"+
    "\5\0\23\22\260\0\100\22\200\0\113\22\4\0\1\13"+
    "\1\22\67\13\7\0\4\13\15\22\100\0\2\22\1\0"+
    "\1\22\34\0\370\22\10\0\363\22\15\0\37\22\61\0"+
    "\3\22\21\0\4\22\10\0\u018c\22\4\0\153\22\5\0"+
    "\15\22\3\0\11\22\7\0\12\22\3\0\2\13\306\0"+
    "\5\13\3\0\6\13\10\0\10\13\2\0\7\13\36\0"+
    "\4\13\224\0\3\13\273\0\125\22\1\0\107\22\1\0"+
    "\2\22\2\0\1\22\2\0\2\22\2\0\4\22\1\0"+
    "\14\22\1\0\1\22\1\0\7\22\1\0\101\22\1\0"+
    "\4\22\2\0\10\22\1\0\7\22\1\0\34\22\1\0"+
    "\4\22\1\0\5\22\1\0\1\22\3\0\7\22\1\0"+
    "\u0154\22\2\0\31\22\1\0\31\22\1\0\37\22\1\0"+
    "\31\22\1\0\37\22\1\0\31\22\1\0\37\22\1\0"+
    "\31\22\1\0\37\22\1\0\31\22\1\0\10\22\2\0"+
    "\151\13\4\0\62\13\10\0\1\13\16\0\1\13\26\0"+
    "\5\13\1\0\17\13\120\0\7\13\1\0\21\13\2\0"+
    "\7\13\1\0\2\13\1\0\5\13\325\0\55\22\3\0"+
    "\7\13\7\22\2\0\12\13\4\0\1\22\u0171\0\54\22"+
    "\16\13\6\0\305\22\13\0\7\13\51\0\104\22\7\13"+
    "\1\22\4\0\12\13\246\0\4\22\1\0\33\22\1\0"+
    "\2\22\1\0\1\22\2\0\1\22\1\0\12\22\1\0"+
    "\4\22\1\0\1\22\1\0\1\22\6\0\1\22\4\0"+
    "\1\22\1\0\1\22\1\0\1\22\1\0\3\22\1\0"+
    "\2\22\1\0\1\22\2\0\1\22\1\0\1\22\1\0"+
    "\1\22\1\0\1\22\1\0\1\22\1\0\2\22\1\0"+
    "\1\22\2\0\4\22\1\0\7\22\1\0\4\22\1\0"+
    "\4\22\1\0\1\22\1\0\12\22\1\0\21\22\5\0"+
    "\3\22\1\0\5\22\1\0\21\22\104\0\327\22\51\0"+
    "\65\22\13\0\336\22\2\0\u0182\22\16\0\u0131\22\37\0"+
    "\36\22\342\0\360\13\20\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[29184];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\10\20\1\24\1\25\1\26"+
    "\1\0\1\27\1\20\1\30\7\20\1\0\1\31\11\20"+
    "\1\32\6\20\1\33\1\20\1\34\1\35\1\20\1\36"+
    "\1\20\1\37\1\40\1\20\1\41\1\42";

  private static int [] zzUnpackAction() {
    int [] result = new int[72];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\51\0\122\0\51\0\51\0\51\0\51\0\173"+
    "\0\51\0\244\0\51\0\51\0\51\0\51\0\51\0\51"+
    "\0\315\0\51\0\51\0\51\0\366\0\u011f\0\u0148\0\u0171"+
    "\0\u019a\0\u01c3\0\u01ec\0\u0215\0\51\0\51\0\51\0\u023e"+
    "\0\u0267\0\u0290\0\315\0\u02b9\0\u02e2\0\u030b\0\u0334\0\u035d"+
    "\0\u0386\0\u03af\0\u03d8\0\315\0\u0401\0\u042a\0\u0453\0\u047c"+
    "\0\u04a5\0\u04ce\0\u04f7\0\u0520\0\u0549\0\51\0\u0572\0\u059b"+
    "\0\u05c4\0\u05ed\0\u0616\0\u063f\0\315\0\u0668\0\315\0\315"+
    "\0\u0691\0\315\0\u06ba\0\315\0\315\0\u06e3\0\315\0\315";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[72];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\2\1\7\1\10"+
    "\1\11\1\12\1\2\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\21\1\26"+
    "\1\21\1\27\1\30\1\31\1\21\1\32\5\21\1\33"+
    "\1\34\1\21\1\35\1\36\52\0\2\3\66\0\1\37"+
    "\36\0\1\40\3\0\1\41\51\0\1\21\6\0\1\21"+
    "\3\0\21\21\15\0\1\21\6\0\1\21\3\0\11\21"+
    "\1\42\3\21\1\43\3\21\15\0\1\21\6\0\1\21"+
    "\3\0\7\21\1\44\11\21\15\0\1\21\6\0\1\21"+
    "\3\0\1\45\20\21\15\0\1\21\6\0\1\21\3\0"+
    "\14\21\1\46\4\21\15\0\1\21\6\0\1\21\3\0"+
    "\10\21\1\47\10\21\15\0\1\21\6\0\1\21\3\0"+
    "\1\50\20\21\15\0\1\21\6\0\1\21\3\0\14\21"+
    "\1\51\4\21\15\0\1\21\6\0\1\21\3\0\11\21"+
    "\1\52\7\21\2\0\6\40\1\53\42\40\2\41\1\0"+
    "\46\41\13\0\1\21\6\0\1\21\3\0\20\21\1\54"+
    "\15\0\1\21\6\0\1\21\3\0\1\55\5\21\1\56"+
    "\12\21\15\0\1\21\6\0\1\21\3\0\7\21\1\57"+
    "\11\21\15\0\1\21\6\0\1\21\3\0\1\60\11\21"+
    "\1\61\6\21\15\0\1\21\6\0\1\21\3\0\13\21"+
    "\1\62\5\21\15\0\1\21\6\0\1\21\3\0\2\21"+
    "\1\63\16\21\15\0\1\21\6\0\1\21\3\0\17\21"+
    "\1\64\1\21\15\0\1\21\6\0\1\21\3\0\6\21"+
    "\1\65\12\21\2\0\6\40\1\53\3\40\1\66\36\40"+
    "\13\0\1\21\6\0\1\21\3\0\15\21\1\67\3\21"+
    "\15\0\1\21\6\0\1\21\3\0\10\21\1\70\10\21"+
    "\15\0\1\21\6\0\1\21\3\0\15\21\1\64\3\21"+
    "\15\0\1\21\6\0\1\21\3\0\10\21\1\71\10\21"+
    "\15\0\1\21\6\0\1\21\3\0\17\21\1\72\1\21"+
    "\15\0\1\21\6\0\1\21\3\0\12\21\1\73\6\21"+
    "\15\0\1\21\6\0\1\21\3\0\14\21\1\74\4\21"+
    "\15\0\1\21\6\0\1\21\3\0\3\21\1\75\15\21"+
    "\15\0\1\21\6\0\1\21\3\0\12\21\1\76\6\21"+
    "\15\0\1\21\6\0\1\21\3\0\15\21\1\77\3\21"+
    "\15\0\1\21\6\0\1\21\3\0\1\21\1\100\17\21"+
    "\15\0\1\21\6\0\1\21\3\0\10\21\1\101\10\21"+
    "\15\0\1\21\6\0\1\21\3\0\13\21\1\102\5\21"+
    "\15\0\1\21\6\0\1\21\3\0\14\21\1\103\4\21"+
    "\15\0\1\21\6\0\1\21\3\0\12\21\1\104\6\21"+
    "\15\0\1\21\6\0\1\21\3\0\11\21\1\105\7\21"+
    "\15\0\1\21\6\0\1\21\3\0\1\106\20\21\15\0"+
    "\1\21\6\0\1\21\3\0\16\21\1\107\2\21\15\0"+
    "\1\21\6\0\1\21\3\0\14\21\1\110\4\21\2\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[1804];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\4\11\1\1\1\11\1\1\6\11"+
    "\1\1\3\11\10\1\3\11\1\0\12\1\1\0\12\1"+
    "\1\11\22\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[72];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _YggdrasilLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return BAD_CHARACTER;
            }
          // fall through
          case 35: break;
          case 2:
            { return WHITE_SPACE;
            }
          // fall through
          case 36: break;
          case 3:
            { return DOLLAR;
            }
          // fall through
          case 37: break;
          case 4:
            { return PARENTHESIS_L;
            }
          // fall through
          case 38: break;
          case 5:
            { return PARENTHESIS_R;
            }
          // fall through
          case 39: break;
          case 6:
            { return COMMA;
            }
          // fall through
          case 40: break;
          case 7:
            { return HYPHEN;
            }
          // fall through
          case 41: break;
          case 8:
            { return DOT;
            }
          // fall through
          case 42: break;
          case 9:
            { return SLASH;
            }
          // fall through
          case 43: break;
          case 10:
            { return COLON;
            }
          // fall through
          case 44: break;
          case 11:
            { return SEMICOLON;
            }
          // fall through
          case 45: break;
          case 12:
            { return ANGLE_L;
            }
          // fall through
          case 46: break;
          case 13:
            { return EQ;
            }
          // fall through
          case 47: break;
          case 14:
            { return ANGLE_R;
            }
          // fall through
          case 48: break;
          case 15:
            { return AT;
            }
          // fall through
          case 49: break;
          case 16:
            { return SYMBOL;
            }
          // fall through
          case 50: break;
          case 17:
            { return BRACKET_L;
            }
          // fall through
          case 51: break;
          case 18:
            { return BRACKET_R;
            }
          // fall through
          case 52: break;
          case 19:
            { return ACCENT;
            }
          // fall through
          case 53: break;
          case 20:
            { return BRACE_L;
            }
          // fall through
          case 54: break;
          case 21:
            { return BRACE_R;
            }
          // fall through
          case 55: break;
          case 22:
            { return TO;
            }
          // fall through
          case 56: break;
          case 23:
            { return COMMENT_LINE;
            }
          // fall through
          case 57: break;
          case 24:
            { return KW_AS;
            }
          // fall through
          case 58: break;
          case 25:
            { return KW_ANY;
            }
          // fall through
          case 59: break;
          case 26:
            { return COMMENT_BLOCK;
            }
          // fall through
          case 60: break;
          case 27:
            { return KW_BOOLEAN;
            }
          // fall through
          case 61: break;
          case 28:
            { return KW_CLASS;
            }
          // fall through
          case 62: break;
          case 29:
            { return KW_CLIMB;
            }
          // fall through
          case 63: break;
          case 30:
            { return KW_GROUP;
            }
          // fall through
          case 64: break;
          case 31:
            { return KW_MACRO;
            }
          // fall through
          case 65: break;
          case 32:
            { return KW_UNION;
            }
          // fall through
          case 66: break;
          case 33:
            { return KW_IMPORT;
            }
          // fall through
          case 67: break;
          case 34:
            { return KW_GRAMMAR;
            }
          // fall through
          case 68: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
