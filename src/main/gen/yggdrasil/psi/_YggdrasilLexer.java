// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: yggdrasil.flex

package yggdrasil.psi;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static yggdrasil.psi.YggdrasilTypes.*;


public class _YggdrasilLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\2\u1f00\1\u2200\1\u2300"+
    "\2\u1f00\31\u0100\1\u2400\121\u0100\1\u2500\4\u0100\1\u2600\1\u0100"+
    "\1\u2700\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\53\u0100\1\u2d00"+
    "\10\u2e00\31\u1f00\1\u0100\1\u2f00\1\u3000\1\u3100\1\u3200\1\u3300"+
    "\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u3a00\1\u0100"+
    "\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u4100\1\u1f00"+
    "\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800\1\u4900"+
    "\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u1f00\1\u4e00\1\u4f00\1\u5000"+
    "\1\u1f00\3\u0100\1\u5100\1\u5200\1\u5300\12\u1f00\4\u0100\1\u5400"+
    "\17\u1f00\2\u0100\1\u5500\41\u1f00\2\u0100\1\u5600\1\u5700\2\u1f00"+
    "\1\u5800\1\u5900\27\u0100\1\u5a00\2\u0100\1\u5b00\45\u1f00\1\u0100"+
    "\1\u5c00\1\u5d00\11\u1f00\1\u5e00\24\u1f00\1\u5f00\1\u6000\1\u1f00"+
    "\1\u6100\1\u6200\1\u6300\1\u6400\2\u1f00\1\u6500\5\u1f00\1\u6600"+
    "\1\u6700\1\u6800\5\u1f00\1\u6900\1\u6a00\4\u1f00\1\u6b00\21\u1f00"+
    "\246\u0100\1\u6c00\20\u0100\1\u6d00\1\u6e00\25\u0100\1\u6f00\34\u0100"+
    "\1\u7000\14\u1f00\2\u0100\1\u7100\u0b06\u1f00\1\u7200\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\2\22\0\1\1\3\0"+
    "\1\4\3\0\1\5\1\6\1\7\1\0\1\10\1\11"+
    "\1\12\1\13\12\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\0\1\22\32\23\1\24\1\25\1\26\1\27\1\23"+
    "\1\30\1\31\1\32\1\33\1\23\1\34\1\35\1\36"+
    "\1\23\1\37\2\23\1\40\1\41\1\42\1\43\1\44"+
    "\1\23\1\45\1\46\1\47\1\50\3\23\1\51\1\23"+
    "\1\52\1\53\1\54\1\55\6\0\1\3\32\0\1\1"+
    "\11\0\1\23\12\0\1\23\1\0\1\56\2\0\1\23"+
    "\5\0\27\23\1\0\37\23\1\0\u01ca\23\4\0\14\23"+
    "\16\0\5\23\7\0\1\23\1\0\1\23\21\0\160\56"+
    "\5\23\1\0\2\23\3\0\3\23\1\0\1\23\6\0"+
    "\1\23\1\56\3\23\1\0\1\23\1\0\24\23\1\0"+
    "\123\23\1\0\213\23\1\0\5\56\2\0\246\23\1\0"+
    "\46\23\2\0\1\23\6\0\51\23\10\0\55\56\1\0"+
    "\1\56\1\0\2\56\1\0\2\56\1\0\1\56\10\0"+
    "\33\23\4\0\4\23\35\0\13\56\5\0\53\23\37\56"+
    "\4\0\2\23\1\56\143\23\1\0\1\23\7\56\2\0"+
    "\6\56\2\23\2\56\1\0\4\56\2\23\12\56\3\23"+
    "\2\0\1\23\20\0\1\23\1\56\36\23\33\56\2\0"+
    "\131\23\13\56\1\23\16\0\12\56\41\23\11\56\2\23"+
    "\4\0\1\23\2\0\1\56\2\0\26\23\4\56\1\23"+
    "\11\56\1\23\3\56\1\23\5\56\22\0\31\23\3\56"+
    "\4\0\13\23\65\0\25\23\1\0\10\23\25\0\17\56"+
    "\1\0\41\56\66\23\3\56\1\23\22\56\1\23\7\56"+
    "\12\23\2\56\2\0\12\56\1\0\20\23\3\56\1\0"+
    "\10\23\2\0\2\23\2\0\26\23\1\0\7\23\1\0"+
    "\1\23\3\0\4\23\2\0\1\56\1\23\7\56\2\0"+
    "\2\56\2\0\3\56\1\23\10\0\1\56\4\0\2\23"+
    "\1\0\3\23\2\56\2\0\12\56\2\23\12\0\1\23"+
    "\1\0\1\56\2\0\3\56\1\0\6\23\4\0\2\23"+
    "\2\0\26\23\1\0\7\23\1\0\2\23\1\0\2\23"+
    "\1\0\2\23\2\0\1\56\1\0\5\56\4\0\2\56"+
    "\2\0\3\56\3\0\1\56\7\0\4\23\1\0\1\23"+
    "\7\0\14\56\3\23\1\56\13\0\3\56\1\0\11\23"+
    "\1\0\3\23\1\0\26\23\1\0\7\23\1\0\2\23"+
    "\1\0\5\23\2\0\1\56\1\23\10\56\1\0\3\56"+
    "\1\0\3\56\2\0\1\23\17\0\2\23\2\56\2\0"+
    "\12\56\11\0\1\23\6\56\1\0\3\56\1\0\10\23"+
    "\2\0\2\23\2\0\26\23\1\0\7\23\1\0\2\23"+
    "\1\0\5\23\2\0\1\56\1\23\7\56\2\0\2\56"+
    "\2\0\3\56\10\0\2\56\4\0\2\23\1\0\3\23"+
    "\2\56\2\0\12\56\1\0\1\23\20\0\1\56\1\23"+
    "\1\0\6\23\3\0\3\23\1\0\4\23\3\0\2\23"+
    "\1\0\1\23\1\0\2\23\3\0\2\23\3\0\3\23"+
    "\3\0\14\23\4\0\5\56\3\0\3\56\1\0\4\56"+
    "\2\0\1\23\6\0\1\56\16\0\12\56\20\0\5\56"+
    "\10\23\1\0\3\23\1\0\27\23\1\0\20\23\3\0"+
    "\1\23\7\56\1\0\3\56\1\0\4\56\7\0\2\56"+
    "\1\0\3\23\5\0\2\23\2\56\2\0\12\56\20\0"+
    "\1\23\3\56\1\0\10\23\1\0\3\23\1\0\27\23"+
    "\1\0\12\23\1\0\5\23\2\0\1\56\1\23\7\56"+
    "\1\0\3\56\1\0\4\56\7\0\2\56\7\0\1\23"+
    "\1\0\2\23\2\56\2\0\12\56\1\0\2\23\15\0"+
    "\4\56\1\0\10\23\1\0\3\23\1\0\51\23\2\56"+
    "\1\23\7\56\1\0\3\56\1\0\4\56\1\23\5\0"+
    "\3\23\1\56\7\0\3\23\2\56\2\0\12\56\12\0"+
    "\6\23\2\0\2\56\1\0\22\23\3\0\30\23\1\0"+
    "\11\23\1\0\1\23\2\0\7\23\3\0\1\56\4\0"+
    "\6\56\1\0\1\56\1\0\10\56\6\0\12\56\2\0"+
    "\2\56\15\0\60\23\1\56\1\23\10\56\5\0\7\23"+
    "\10\56\1\0\12\56\47\0\2\23\1\0\1\23\1\0"+
    "\5\23\1\0\30\23\1\0\1\23\1\0\12\23\1\56"+
    "\1\23\12\56\1\23\2\0\5\23\1\0\1\23\1\0"+
    "\6\56\2\0\12\56\2\0\4\23\40\0\1\23\27\0"+
    "\2\56\6\0\12\56\13\0\1\56\1\0\1\56\1\0"+
    "\1\56\4\0\2\56\10\23\1\0\44\23\4\0\24\56"+
    "\1\0\2\56\5\23\13\56\1\0\44\56\11\0\1\56"+
    "\71\0\53\23\24\56\1\23\12\56\6\0\6\23\4\56"+
    "\4\23\3\56\1\23\3\56\2\23\7\56\3\23\4\56"+
    "\15\23\14\56\1\23\17\56\2\0\46\23\1\0\1\23"+
    "\5\0\1\23\2\0\53\23\1\0\115\23\1\0\4\23"+
    "\2\0\7\23\1\0\1\23\1\0\4\23\2\0\51\23"+
    "\1\0\4\23\2\0\41\23\1\0\4\23\2\0\7\23"+
    "\1\0\1\23\1\0\4\23\2\0\17\23\1\0\71\23"+
    "\1\0\4\23\2\0\103\23\2\0\3\56\11\0\11\56"+
    "\16\0\20\23\20\0\126\23\2\0\6\23\3\0\u016c\23"+
    "\2\0\21\23\1\1\32\23\5\0\113\23\3\0\13\23"+
    "\7\0\15\23\1\0\4\23\3\56\13\0\22\23\3\56"+
    "\13\0\22\23\2\56\14\0\15\23\1\0\3\23\1\0"+
    "\2\56\14\0\64\23\40\56\3\0\1\23\4\0\1\23"+
    "\1\56\2\0\12\56\41\0\3\56\2\0\12\56\6\0"+
    "\131\23\7\0\51\23\1\56\1\23\5\0\106\23\12\0"+
    "\37\23\1\0\14\56\4\0\14\56\12\0\12\56\36\23"+
    "\2\0\5\23\13\0\54\23\4\0\32\23\6\0\13\56"+
    "\45\0\27\23\5\56\4\0\65\23\12\56\1\0\35\56"+
    "\2\0\13\56\6\0\12\56\15\0\1\23\10\0\16\56"+
    "\102\0\5\56\57\23\21\56\7\23\4\0\12\56\21\0"+
    "\11\56\14\0\3\56\36\23\15\56\2\23\12\56\54\23"+
    "\16\56\14\0\44\23\24\56\10\0\12\56\3\0\3\23"+
    "\12\56\44\23\2\0\11\23\7\0\53\23\2\0\3\23"+
    "\20\0\3\56\1\0\25\56\4\23\1\56\6\23\1\56"+
    "\2\23\3\56\1\23\5\0\300\23\72\56\1\0\5\56"+
    "\26\23\2\0\6\23\2\0\46\23\2\0\6\23\2\0"+
    "\10\23\1\0\1\23\1\0\1\23\1\0\1\23\1\0"+
    "\37\23\2\0\65\23\1\0\7\23\1\0\1\23\3\0"+
    "\3\23\1\0\7\23\3\0\4\23\2\0\6\23\4\0"+
    "\15\23\5\0\3\23\1\0\7\23\3\0\13\1\35\0"+
    "\2\3\5\0\1\1\17\0\2\56\23\0\1\56\12\0"+
    "\1\1\21\0\1\23\15\0\1\23\20\0\15\23\63\0"+
    "\15\56\4\0\1\56\3\0\14\56\21\0\1\23\4\0"+
    "\1\23\2\0\12\23\1\0\1\23\2\0\6\23\6\0"+
    "\1\23\1\0\1\23\1\0\1\23\1\0\20\23\2\0"+
    "\4\23\5\0\5\23\4\0\1\23\21\0\51\23\u0177\0"+
    "\57\23\1\0\57\23\1\0\205\23\6\0\4\23\3\56"+
    "\2\23\14\0\46\23\1\0\1\23\5\0\1\23\2\0"+
    "\70\23\7\0\1\23\17\0\1\56\27\23\11\0\7\23"+
    "\1\0\7\23\1\0\7\23\1\0\7\23\1\0\7\23"+
    "\1\0\7\23\1\0\7\23\1\0\7\23\1\0\40\56"+
    "\1\1\4\0\3\23\31\0\11\23\6\56\1\0\5\23"+
    "\2\0\5\23\4\0\126\23\2\0\2\56\2\0\3\23"+
    "\1\0\132\23\1\0\4\23\5\0\53\23\1\0\136\23"+
    "\21\0\33\23\65\0\306\23\112\0\360\23\20\0\215\23"+
    "\103\0\56\23\2\0\15\23\3\0\20\23\12\56\2\23"+
    "\24\0\57\23\1\56\4\0\12\56\1\0\37\23\2\56"+
    "\120\23\2\56\45\0\11\23\2\0\147\23\2\0\65\23"+
    "\2\0\5\23\60\0\13\23\1\56\3\23\1\56\4\23"+
    "\1\56\27\23\5\56\30\0\64\23\14\0\2\56\62\23"+
    "\22\56\12\0\12\56\6\0\22\56\6\23\3\0\1\23"+
    "\1\0\2\23\13\56\34\23\10\56\2\0\27\23\15\56"+
    "\14\0\35\23\3\0\4\56\57\23\16\56\16\0\1\23"+
    "\12\56\6\0\5\23\1\56\12\23\12\56\5\23\1\0"+
    "\51\23\16\56\11\0\3\23\1\56\10\23\2\56\2\0"+
    "\12\56\6\0\27\23\3\0\1\23\3\56\62\23\1\56"+
    "\1\23\3\56\2\23\2\56\5\23\2\56\1\23\1\56"+
    "\1\23\30\0\3\23\2\0\13\23\5\56\2\0\3\23"+
    "\2\56\12\0\6\23\2\0\6\23\2\0\6\23\11\0"+
    "\7\23\1\0\7\23\1\0\53\23\1\0\14\23\10\0"+
    "\163\23\10\56\1\0\2\56\2\0\12\56\6\0\244\23"+
    "\14\0\27\23\4\0\61\23\4\0\u0100\57\156\23\2\0"+
    "\152\23\46\0\7\23\14\0\5\23\5\0\1\23\1\56"+
    "\12\23\1\0\15\23\1\0\5\23\1\0\1\23\1\0"+
    "\2\23\1\0\2\23\1\0\154\23\41\0\213\23\6\0"+
    "\332\23\22\0\100\23\2\0\66\23\50\0\12\23\6\0"+
    "\20\56\20\0\20\56\3\0\2\56\30\0\3\56\41\0"+
    "\1\23\1\0\1\23\3\0\1\23\1\0\1\23\1\0"+
    "\1\23\1\0\1\23\1\0\176\23\23\0\12\56\7\0"+
    "\32\23\4\0\1\56\1\0\32\23\13\0\70\23\2\56"+
    "\37\23\3\0\6\23\2\0\6\23\2\0\6\23\2\0"+
    "\3\23\43\0\14\23\1\0\32\23\1\0\23\23\1\0"+
    "\2\23\1\0\17\23\2\0\16\23\42\0\173\23\105\0"+
    "\65\23\210\0\1\56\202\0\35\23\3\0\61\23\17\0"+
    "\1\56\37\0\40\23\15\0\36\23\5\0\46\23\5\56"+
    "\5\0\36\23\2\0\44\23\4\0\10\23\1\0\5\23"+
    "\52\0\236\23\2\0\12\56\6\0\44\23\4\0\44\23"+
    "\4\0\50\23\10\0\64\23\234\0\67\23\11\0\26\23"+
    "\12\0\10\23\230\0\6\23\2\0\1\23\1\0\54\23"+
    "\1\0\2\23\3\0\1\23\2\0\27\23\12\0\27\23"+
    "\11\0\37\23\101\0\23\23\1\0\2\23\12\0\26\23"+
    "\12\0\32\23\106\0\70\23\6\0\2\23\100\0\1\23"+
    "\3\56\1\0\2\56\5\0\4\56\4\23\1\0\3\23"+
    "\1\0\35\23\2\0\3\56\4\0\1\56\40\0\35\23"+
    "\3\0\35\23\43\0\10\23\1\0\34\23\2\56\31\0"+
    "\66\23\12\0\26\23\12\0\23\23\15\0\22\23\156\0"+
    "\111\23\67\0\63\23\15\0\63\23\15\0\44\23\4\56"+
    "\10\0\12\56\306\0\35\23\12\0\1\23\10\0\26\23"+
    "\13\56\217\0\27\23\11\0\3\56\65\23\17\56\37\0"+
    "\12\56\17\0\4\56\55\23\13\56\25\0\31\23\7\0"+
    "\12\56\6\0\3\56\44\23\16\56\1\0\12\56\4\0"+
    "\1\23\2\56\11\0\43\23\1\56\2\0\1\23\11\0"+
    "\3\56\60\23\16\56\4\23\4\0\4\56\3\0\12\56"+
    "\1\23\1\0\1\23\43\0\22\23\1\0\31\23\14\56"+
    "\6\0\1\56\101\0\7\23\1\0\1\23\1\0\4\23"+
    "\1\0\17\23\1\0\12\23\7\0\57\23\14\56\5\0"+
    "\12\56\6\0\4\56\1\0\10\23\2\0\2\23\2\0"+
    "\26\23\1\0\7\23\1\0\2\23\1\0\5\23\1\0"+
    "\2\56\1\23\7\56\2\0\2\56\2\0\3\56\2\0"+
    "\1\23\6\0\1\56\5\0\5\23\2\56\2\0\7\56"+
    "\3\0\5\56\213\0\65\23\22\56\4\23\5\0\12\56"+
    "\4\0\1\56\1\23\40\0\60\23\24\56\2\23\1\0"+
    "\1\23\10\0\12\56\246\0\57\23\7\56\2\0\11\56"+
    "\27\0\4\23\2\56\42\0\60\23\21\56\3\0\1\23"+
    "\13\0\12\56\46\0\53\23\15\56\1\23\7\0\12\56"+
    "\66\0\33\23\2\0\17\56\4\0\12\56\306\0\54\23"+
    "\17\56\145\0\100\23\12\56\25\0\1\23\240\0\10\23"+
    "\2\0\47\23\7\56\2\0\7\56\1\23\1\0\1\23"+
    "\1\56\33\0\1\23\12\56\50\23\7\56\1\23\4\56"+
    "\10\0\1\56\10\0\1\23\13\56\56\23\20\56\3\0"+
    "\1\23\42\0\71\23\7\0\11\23\1\0\45\23\10\56"+
    "\1\0\10\56\1\23\17\0\12\56\30\0\36\23\2\0"+
    "\26\56\1\0\16\56\111\0\7\23\1\0\2\23\1\0"+
    "\46\23\6\56\3\0\1\56\1\0\2\56\1\0\7\56"+
    "\1\23\1\56\10\0\12\56\6\0\6\23\1\0\2\23"+
    "\1\0\40\23\5\56\1\0\2\56\1\0\5\56\1\23"+
    "\7\0\12\56\u0136\0\23\23\4\56\11\0\232\23\146\0"+
    "\157\23\21\0\304\23\274\0\57\23\321\0\107\23\271\0"+
    "\71\23\7\0\37\23\1\0\12\56\146\0\36\23\2\0"+
    "\5\56\13\0\60\23\7\56\11\0\4\23\14\0\12\56"+
    "\11\0\25\23\5\0\23\23\260\0\100\23\200\0\113\23"+
    "\4\0\1\56\1\23\67\56\7\0\4\56\15\23\100\0"+
    "\2\23\1\0\1\23\34\0\370\23\10\0\363\23\15\0"+
    "\37\23\61\0\3\23\21\0\4\23\10\0\u018c\23\4\0"+
    "\153\23\5\0\15\23\3\0\11\23\7\0\12\23\3\0"+
    "\2\56\306\0\5\56\3\0\6\56\10\0\10\56\2\0"+
    "\7\56\36\0\4\56\224\0\3\56\273\0\125\23\1\0"+
    "\107\23\1\0\2\23\2\0\1\23\2\0\2\23\2\0"+
    "\4\23\1\0\14\23\1\0\1\23\1\0\7\23\1\0"+
    "\101\23\1\0\4\23\2\0\10\23\1\0\7\23\1\0"+
    "\34\23\1\0\4\23\1\0\5\23\1\0\1\23\3\0"+
    "\7\23\1\0\u0154\23\2\0\31\23\1\0\31\23\1\0"+
    "\37\23\1\0\31\23\1\0\37\23\1\0\31\23\1\0"+
    "\37\23\1\0\31\23\1\0\37\23\1\0\31\23\1\0"+
    "\10\23\2\0\151\56\4\0\62\56\10\0\1\56\16\0"+
    "\1\56\26\0\5\56\1\0\17\56\120\0\7\56\1\0"+
    "\21\56\2\0\7\56\1\0\2\56\1\0\5\56\325\0"+
    "\55\23\3\0\7\56\7\23\2\0\12\56\4\0\1\23"+
    "\u0171\0\54\23\16\56\6\0\305\23\13\0\7\56\51\0"+
    "\104\23\7\56\1\23\4\0\12\56\246\0\4\23\1\0"+
    "\33\23\1\0\2\23\1\0\1\23\2\0\1\23\1\0"+
    "\12\23\1\0\4\23\1\0\1\23\1\0\1\23\6\0"+
    "\1\23\4\0\1\23\1\0\1\23\1\0\1\23\1\0"+
    "\3\23\1\0\2\23\1\0\1\23\2\0\1\23\1\0"+
    "\1\23\1\0\1\23\1\0\1\23\1\0\1\23\1\0"+
    "\2\23\1\0\1\23\2\0\4\23\1\0\7\23\1\0"+
    "\4\23\1\0\4\23\1\0\1\23\1\0\12\23\1\0"+
    "\21\23\5\0\3\23\1\0\5\23\1\0\21\23\104\0"+
    "\327\23\51\0\65\23\13\0\336\23\2\0\u0182\23\16\0"+
    "\u0131\23\37\0\36\23\342\0\360\56\20\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[29440];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\1\1\23\1\24\1\1\10\21"+
    "\1\25\1\26\1\27\1\30\1\31\1\0\1\32\1\33"+
    "\1\0\2\21\1\34\7\21\1\0\1\35\11\21\1\36"+
    "\6\21\1\37\1\21\1\40\1\41\1\21\1\42\1\21"+
    "\1\43\1\44\1\21\1\45\1\46";

  private static int [] zzUnpackAction() {
    int [] result = new int[80];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\60\0\140\0\60\0\60\0\60\0\60\0\220"+
    "\0\60\0\300\0\360\0\60\0\60\0\60\0\60\0\60"+
    "\0\60\0\u0120\0\60\0\u0150\0\60\0\60\0\u0180\0\u01b0"+
    "\0\u01e0\0\u0210\0\u0240\0\u0270\0\u02a0\0\u02d0\0\u0300\0\60"+
    "\0\60\0\60\0\60\0\60\0\u0330\0\u0360\0\60\0\u0180"+
    "\0\60\0\u0390\0\u0120\0\u03c0\0\u03f0\0\u0420\0\u0450\0\u0480"+
    "\0\u04b0\0\u04e0\0\u0510\0\u0120\0\u0540\0\u0570\0\u05a0\0\u05d0"+
    "\0\u0600\0\u0630\0\u0660\0\u0690\0\u06c0\0\60\0\u06f0\0\u0720"+
    "\0\u0750\0\u0780\0\u07b0\0\u07e0\0\u0120\0\u0810\0\u0120\0\u0120"+
    "\0\u0840\0\u0120\0\u0870\0\u0120\0\u0120\0\u08a0\0\u0120\0\u0120";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[80];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\3\3\1\4\1\5\1\6\1\2\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\22\1\31\1\22\1\32\1\33\1\34\1\22\1\35"+
    "\5\22\1\36\1\37\1\22\1\40\1\41\1\42\1\43"+
    "\2\2\61\0\3\3\75\0\1\44\45\0\1\45\3\0"+
    "\1\46\60\0\1\13\57\0\1\22\6\0\1\22\5\0"+
    "\21\22\4\0\1\22\1\0\2\47\2\0\53\47\1\0"+
    "\30\50\1\51\27\50\14\0\1\22\6\0\1\22\5\0"+
    "\11\22\1\52\3\22\1\53\3\22\4\0\1\22\15\0"+
    "\1\22\6\0\1\22\5\0\7\22\1\54\11\22\4\0"+
    "\1\22\15\0\1\22\6\0\1\22\5\0\1\55\20\22"+
    "\4\0\1\22\15\0\1\22\6\0\1\22\5\0\14\22"+
    "\1\56\4\22\4\0\1\22\15\0\1\22\6\0\1\22"+
    "\5\0\10\22\1\57\10\22\4\0\1\22\15\0\1\22"+
    "\6\0\1\22\5\0\1\60\20\22\4\0\1\22\15\0"+
    "\1\22\6\0\1\22\5\0\14\22\1\61\4\22\4\0"+
    "\1\22\15\0\1\22\6\0\1\22\5\0\11\22\1\62"+
    "\7\22\4\0\1\22\1\0\7\45\1\63\50\45\2\46"+
    "\1\0\55\46\14\0\1\22\6\0\1\22\5\0\20\22"+
    "\1\64\4\0\1\22\15\0\1\22\6\0\1\22\5\0"+
    "\1\65\5\22\1\66\12\22\4\0\1\22\15\0\1\22"+
    "\6\0\1\22\5\0\7\22\1\67\11\22\4\0\1\22"+
    "\15\0\1\22\6\0\1\22\5\0\1\70\11\22\1\71"+
    "\6\22\4\0\1\22\15\0\1\22\6\0\1\22\5\0"+
    "\13\22\1\72\5\22\4\0\1\22\15\0\1\22\6\0"+
    "\1\22\5\0\2\22\1\73\16\22\4\0\1\22\15\0"+
    "\1\22\6\0\1\22\5\0\17\22\1\74\1\22\4\0"+
    "\1\22\15\0\1\22\6\0\1\22\5\0\6\22\1\75"+
    "\12\22\4\0\1\22\1\0\7\45\1\63\3\45\1\76"+
    "\44\45\14\0\1\22\6\0\1\22\5\0\15\22\1\77"+
    "\3\22\4\0\1\22\15\0\1\22\6\0\1\22\5\0"+
    "\10\22\1\100\10\22\4\0\1\22\15\0\1\22\6\0"+
    "\1\22\5\0\15\22\1\74\3\22\4\0\1\22\15\0"+
    "\1\22\6\0\1\22\5\0\10\22\1\101\10\22\4\0"+
    "\1\22\15\0\1\22\6\0\1\22\5\0\17\22\1\102"+
    "\1\22\4\0\1\22\15\0\1\22\6\0\1\22\5\0"+
    "\12\22\1\103\6\22\4\0\1\22\15\0\1\22\6\0"+
    "\1\22\5\0\14\22\1\104\4\22\4\0\1\22\15\0"+
    "\1\22\6\0\1\22\5\0\3\22\1\105\15\22\4\0"+
    "\1\22\15\0\1\22\6\0\1\22\5\0\12\22\1\106"+
    "\6\22\4\0\1\22\15\0\1\22\6\0\1\22\5\0"+
    "\15\22\1\107\3\22\4\0\1\22\15\0\1\22\6\0"+
    "\1\22\5\0\1\22\1\110\17\22\4\0\1\22\15\0"+
    "\1\22\6\0\1\22\5\0\10\22\1\111\10\22\4\0"+
    "\1\22\15\0\1\22\6\0\1\22\5\0\13\22\1\112"+
    "\5\22\4\0\1\22\15\0\1\22\6\0\1\22\5\0"+
    "\14\22\1\113\4\22\4\0\1\22\15\0\1\22\6\0"+
    "\1\22\5\0\12\22\1\114\6\22\4\0\1\22\15\0"+
    "\1\22\6\0\1\22\5\0\11\22\1\115\7\22\4\0"+
    "\1\22\15\0\1\22\6\0\1\22\5\0\1\116\20\22"+
    "\4\0\1\22\15\0\1\22\6\0\1\22\5\0\16\22"+
    "\1\117\2\22\4\0\1\22\15\0\1\22\6\0\1\22"+
    "\5\0\14\22\1\120\4\22\4\0\1\22\1\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[2256];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\4\11\1\1\1\11\2\1\6\11"+
    "\1\1\1\11\1\1\2\11\11\1\5\11\1\0\1\1"+
    "\1\11\1\0\1\11\11\1\1\0\12\1\1\11\22\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[80];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _YggdrasilLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return BAD_CHARACTER;
            }
          // fall through
          case 39: break;
          case 2:
            { return WHITE_SPACE;
            }
          // fall through
          case 40: break;
          case 3:
            { return DOLLAR;
            }
          // fall through
          case 41: break;
          case 4:
            { return PARENTHESIS_L;
            }
          // fall through
          case 42: break;
          case 5:
            { return PARENTHESIS_R;
            }
          // fall through
          case 43: break;
          case 6:
            { return COMMA;
            }
          // fall through
          case 44: break;
          case 7:
            { return HYPHEN;
            }
          // fall through
          case 45: break;
          case 8:
            { return DOT;
            }
          // fall through
          case 46: break;
          case 9:
            { return SLASH;
            }
          // fall through
          case 47: break;
          case 10:
            { return INTEGER;
            }
          // fall through
          case 48: break;
          case 11:
            { return COLON;
            }
          // fall through
          case 49: break;
          case 12:
            { return SEMICOLON;
            }
          // fall through
          case 50: break;
          case 13:
            { return ANGLE_L;
            }
          // fall through
          case 51: break;
          case 14:
            { return EQ;
            }
          // fall through
          case 52: break;
          case 15:
            { return ANGLE_R;
            }
          // fall through
          case 53: break;
          case 16:
            { return AT;
            }
          // fall through
          case 54: break;
          case 17:
            { return SYMBOL;
            }
          // fall through
          case 55: break;
          case 18:
            { return BRACKET_L;
            }
          // fall through
          case 56: break;
          case 19:
            { return BRACKET_R;
            }
          // fall through
          case 57: break;
          case 20:
            { return ACCENT;
            }
          // fall through
          case 58: break;
          case 21:
            { return BRACE_L;
            }
          // fall through
          case 59: break;
          case 22:
            { return OP_OR;
            }
          // fall through
          case 60: break;
          case 23:
            { return BRACE_R;
            }
          // fall through
          case 61: break;
          case 24:
            { return OP_CONCAT;
            }
          // fall through
          case 62: break;
          case 25:
            { return TO;
            }
          // fall through
          case 63: break;
          case 26:
            { return COMMENT_LINE;
            }
          // fall through
          case 64: break;
          case 27:
            { return ESCAPED;
            }
          // fall through
          case 65: break;
          case 28:
            { return KW_AS;
            }
          // fall through
          case 66: break;
          case 29:
            { return KW_ANY;
            }
          // fall through
          case 67: break;
          case 30:
            { return COMMENT_BLOCK;
            }
          // fall through
          case 68: break;
          case 31:
            { return KW_BOOLEAN;
            }
          // fall through
          case 69: break;
          case 32:
            { return KW_CLASS;
            }
          // fall through
          case 70: break;
          case 33:
            { return KW_CLIMB;
            }
          // fall through
          case 71: break;
          case 34:
            { return KW_GROUP;
            }
          // fall through
          case 72: break;
          case 35:
            { return KW_MACRO;
            }
          // fall through
          case 73: break;
          case 36:
            { return KW_UNION;
            }
          // fall through
          case 74: break;
          case 37:
            { return KW_IMPORT;
            }
          // fall through
          case 75: break;
          case 38:
            { return KW_GRAMMAR;
            }
          // fall through
          case 76: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
