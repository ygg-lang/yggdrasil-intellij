{
    parserClass = "ygg.intellij.language.parser.YggParser"
    parserUtilClass = "ygg.intellij.language.psi.YggParserExtension"

    psiClassPrefix = "Ygg"
    psiImplClassSuffix = "Node"
    psiPackage = "ygg.intellij.language.psi"
    psiImplPackage = "ygg.intellij.language.psi_node"

    elementTypeHolderClass = "ygg.intellij.language.psi.YggTypes"
    elementTypeClass = "ygg.intellij.language.psi.YggElementType"
    tokenTypeClass = "ygg.intellij.language.psi.YggTokenType"

    psiImplUtilClass = "ygg.intellij.language.psi_node.YggPsiExtension"

    tokens = [
        AS = "as"

        PARENTHESIS_L = '('
        PARENTHESIS_R = ')'
        BRACKET_L = '['
        BRACKET_R = ']'
        BRACE_L = '{'
        BRACE_R = '}'
        ACCENT = '^'
        ANGLE_L = '<'
        ANGLE_R = '>'
        QUOTATION = '"'
        ESCAPE = '\'
        TAGGED = '<-'

        SOFT_CONNECT = '~'
        CHOOSE='|'

        EQ = '='
        COLON = ':'
        SEMICOLON = ';'
        COMMA = ','
        DOLLAR = '$'
        DOT = '.'
        AT = '@'

        NOT='!'
        OPTIONAL='?'
        MANY1 = '+'
        MANY = '*'
    ]

    extends = "com.intellij.extapi.psi.ASTWrapperPsiElement"
}

Ygg ::= statements*;
// fake used for mixin
// pri used for syntax highlight
fake comment_doc ::= COMMENT_DOC;
private comment ::= COMMENT_LINE | COMMENT_BLOCK | COMMENT_DOC;

private statements ::=
      grammar_statement
    | ignore_statement
    | import_statement
    | macro_statement
    | rule_statement
    | SEMICOLON;
// =====================================================================================================================
ignore_statement ::= IGNORE (identifier | <<paired ignore_inner>>);
private ignore_inner ::= [identifier (COMMA identifier)* [COMMA]];
// ---------------------------------------------------------------------------------------------------------------------
// @grammar ygg {"*.yg","*.ygg", "*.grammar"}
// @grammar ygg;
grammar_statement ::= "grammar" identifier [<<paired grammar_inner>>];
private grammar_inner ::= string (COMMA string)* [COMMA];
// ---------------------------------------------------------------------------------------------------------------------
// @import
import_statement ::= "import" string [identifier | <<paired include_inner>>];
private include_inner ::= [identifier (COMMA identifier)* [COMMA]];
// ---------------------------------------------------------------------------------------------------------------------
// @macro("path")
macro_statement ::= AT SYMBOL <<parenthesis macro_arg COMMA>>;
macro_arg ::= value | macro_statement;
// =====================================================================================================================
// def modifiers rule
rule_statement ::= "def" modifiers SYMBOL [rule_argument] [rule_type] BRACKET_L expr BRACKET_R;
rule_argument ::= PARENTHESIS_L PARENTHESIS_R;
rule_type     ::= (COLON | ARROW) identifier;
expr ::= function_statement | value | branch_mark;
// ---------------------------------------------------------------------------------------------------------------------
// @function("path")
function_statement ::= AT identifier <<parenthesis expr COMMA>>;
// ---------------------------------------------------------------------------------------------------------------------
branch_mark ::= HASH identifier;
// ---------------------------------------------------------------------------------------------------------------------
value ::= NULL | BOOLEAN | num | string | table | namespace;
type_hint ::= identifier;
number_suffix ::= identifier;
charset ::= REGEX_QUOTE char* REGEX_QUOTE regex_mode;
regex_mode ::= SYMBOL;
regex_range ::= REGEX_RANGE_L REGEX_CHARACTER* REGEX_RANGE_R;
// ---------------------------------------------------------------------------------------------------------------------
pair ::= symbol_path eq value;
symbol_path ::= key (DOT key)*;
key ::= string | key_symbol | INTEGER;
private eq ::= EQ | COLON;
key_symbol ::= SYMBOL;
// ---------------------------------------------------------------------------------------------------------------------
private num ::= [SIGN] (INTEGER | DECIMAL) [number_suffix] | [SIGN] BYTE;
// ---------------------------------------------------------------------------------------------------------------------
string ::= esc | STRING_SQ char* STRING_SQ | STRING_DQ char* STRING_DQ;
private char ::= CHARACTER | esc;
private esc ::= ESCAPE_UNICODE | ESCAPE_SPECIAL;
// ---------------------------------------------------------------------------------------------------------------------
table ::= [type_hint] <<paired table_inner>>;
private table_inner ::= [table_item (COMMA table_item)* [COMMA]];
private table_item ::= pair | value;
// ---------------------------------------------------------------------------------------------------------------------
modifiers ::= (identifier !('('|'{'|'-'|':'))*;
identifier ::= SYMBOL;
namespace ::= identifier (DOUBLE_COLON identifier)*
// ---------------------------------------------------------------------------------------------------------------------
meta parenthesis ::= PARENTHESIS_L [<<item>> (<<delimiter>> <<item>>)* [<<delimiter>>]] PARENTHESIS_R;

private meta paired ::=
    PARENTHESIS_L <<param>> PARENTHESIS_R
  | BRACKET_L <<param>> BRACKET_R
  | BRACE_L <<param>> BRACE_R
