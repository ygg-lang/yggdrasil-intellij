{
    parserClass = "yggdrasil.psi.parser.YggdrasilParser"
    parserUtilClass = "yggdrasil.psi.ParserExtension"

    extends = "yggdrasil.psi.YggdrasilElement"

    psiClassPrefix = "Yggdrasil"
    psiImplClassSuffix = "Node"
    psiPackage = "yggdrasil.psi.node"
    psiImplPackage = "yggdrasil.psi.node"

    elementTypeHolderClass = "yggdrasil.psi.YggdrasilTypes"
    elementTypeClass = "yggdrasil.psi.YggdrasilElementType"
    tokenTypeClass = "yggdrasil.psi.YggdrasilTokenType"

    psiImplUtilClass = "yggdrasil.psi.node.YggdrasilPsiExtension"

    tokens = [
        // comment
        COMMENT_LINE = "Comment"
        COMMENT_BLOCK = "Comment Block"

        // literal
        URL = "Url"
        SYMBOL    = "Symbol"
        ESCAPED   = "\escaped"
        INTEGER   = "<<INTEGER>>"

        REFERENCE = "$Symbol"

        SELECTION_LINE = "SELECTION_LINE"


        KW_GRAMMAR = "grammar"
        KW_GROUP = "group"
        KW_CLASS = "class"
        KW_UNION = "union"
        KW_CLIMB = "climb"
        KW_IMPORT = "import"
        KW_AS = "as"
        KW_MACRO = "macro"

		VERSION = "<<semver>>"
        PARENTHESIS_L = '('
        PARENTHESIS_R = ')'
        BRACKET_L = '['
        BRACKET_R = ']'
        BRACE_L = '{'
        BRACE_R = '}'
        ANGLE_L = '<'
        ANGLE_R = '>'
        OP_REMARK = '^'
        EQ = '='
        COLON = ':'
        SEMICOLON = ';'
        COMMA = ','
        DOLLAR = '$'
        DOT = '.'
        STAR = '*'
        AT = '@'
        TO = "->"
        HYPHEN = "-"
        SLASH = '/'
        OP_OR = '|'
        OP_CONCAT = '~'
        PLACE_HOLDER = "_"
//      SPACE='regexp:\s+'
//      ANY = 'regexp:.'

    ]
}

// https://github.com/bytecodealliance/fluent/blob/master/spec/fluent.ebnf
root ::= statements*
private statements ::=
    grammar
  | class
  | union
  | group
  | function-define
  | SEMICOLON
// === annotation statement ===
annotations ::= attribute* identifier*
attribute   ::= (AT|HASH) identifier function-argument? {
	pin = 2
    mixin = "yggdrasil.psi.mixin.MixinAttribute"
    methods=[highlight]
}
// === grammar statement ===
grammar ::= annotations KW_GRAMMAR identifier grammar-body {
	pin = 2
    mixin = "yggdrasil.psi.mixin.MixinGrammar"
}
grammar-body ::= BRACE_L grammar-term* BRACE_R;
grammar-term ::= pair | COMMA | SEMICOLON;
// === class statement ===
class  ::= annotations KW_CLASS identifier class-cast? OP_REMARK? class-body {
    pin = 2
    mixin = "yggdrasil.psi.mixin.MixinClass"
    methods=[createLookup]
}
class-cast ::= TO identifier;
class-body ::= BRACE_L OP_OR? expression? BRACE_R;
// === union statement ===
union  ::= annotations KW_UNION identifier OP_REMARK? union-body {
    pin = 2
    mixin = "yggdrasil.psi.mixin.MixinUnion"
    methods=[createLookup]
}
union-body ::= BRACE_L union-term* BRACE_R;
union-term ::= OP_OR expression-hard tag-branch?;
tag-branch ::= HASH identifier;
// === group statement ===
group  ::= annotations KW_GROUP identifier-free? group-body {
    pin = 2
    mixin = "yggdrasil.psi.mixin.MixinGroup"
    methods=[getTokenList]
}
group-body ::= BRACE_L group-term* BRACE_R;
group-term ::= group-item | SEMICOLON;
group-item ::= attribute* identifier* EQ atomic {
    mixin = "yggdrasil.psi.mixin.MixinGroupItem"
    methods=[highlight createLookup]
}
/// === function definition ===
function-define ::= annotations KW_MACRO identifier function-parameter function-block {
    pin = 2
//    mixin = "yggdrasil.psi.mixin.MixinFunction"
}
function-parameter ::= PARENTHESIS_L (parameter (COMMA parameter)* COMMA?)? PARENTHESIS_R;
parameter ::= identifier ((EQ|COLON) expression)? {

}
function-block ::= BRACE_L OP_OR? expression? BRACE_R;
// === function statement ===
function-call ::= AT identifier tuple? {
    pin = 1
}
// === expression statement ===
expression ::= expression-choice {

};
expression-choice ::= expression-hard (OP_OR expression-hard)* {
    extends = expression
}
expression-hard ::= expression-soft (OP_CONCAT expression-soft)* {
    extends = expression
}
expression-soft ::= expression-tag expression-tag* {
    extends = expression
}
expression-tag ::= (identifier-free COLON)? term {
    extends = expression
}
term ::= prefix* atomic suffix* {
    extends = expression
}
prefix ::= OP_NOT | OP_AND | OP_REMARK;
suffix ::= OP_OPTIONAL | OP_MANY | OP_MANY1 | range;
// === atomic statement ===
atomic ::= expression-group | identifier-free | escape | string | regex | function-call {
    extends = expression
}
expression-group ::= PARENTHESIS_L OP_OR? expression PARENTHESIS_R {
    extends = expression
}
// === atomic statement ===
escape ::= ESCAPED category? {

}
category ::= BRACE_L identifier (EQ identifier)? BRACE_R;
// === atomic statement ===
range    ::= BRACE_L COMMA? BRACE_R
           | BRACE_L range-lower COMMA? BRACE_R
           | BRACE_L COMMA range-upper BRACE_R
           | BRACE_L range-upper COMMA range-upper BRACE_R
range-upper ::= INTEGER;
range-lower ::= INTEGER;

string ::= TEXT_SINGLE | TEXT_DOUBLE {
    mixin = "yggdrasil.psi.mixin.MixinString"
}
regex ::= REGULAR_EXPRESSION | REGULAR_RANGE {
    mixin = "yggdrasil.psi.mixin.MixinRegex"
}
// === atomic statement ===
value    ::= tuple | expression | number;
pair     ::= identifier EQ value;
argument ::= (identifier EQ)? value;
tuple    ::= PARENTHESIS_L (argument (COMMA argument)* COMMA?)? PARENTHESIS_R {
//    mixin = "yggdrasil.psi.mixin.MixinTuple"
}


number ::= INTEGER {
//    mixin = "yggdrasil.psi.mixin.MixinNumber"
}



/* Literals */

/* Identifier */
identifier          ::= SYMBOL | SYMBOW_RAW {
    mixin = "yggdrasil.psi.mixin.MixinIdentifier"
    methods=[highlight]
}
identifier-free     ::= SYMBOL | SYMBOW_RAW | KW_MACRO | KW_CLASS | KW_UNION | KW_GROUP | KW_GRAMMAR | KW_IMPORT | KW_AS | KW_CLIMB {
    extends = identifier
}