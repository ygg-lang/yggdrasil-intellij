{
    parserClass = "yggdrasil.psi.parser.YggdrasilParser"
    parserUtilClass = "yggdrasil.psi.ParserExtension"

    extends = "yggdrasil.psi.YggdrasilElement"

    psiClassPrefix = "Yggdrasil"
    psiImplClassSuffix = "Node"
    psiPackage = "yggdrasil.psi.node"
    psiImplPackage = "yggdrasil.psi.node"

    elementTypeHolderClass = "yggdrasil.psi.YggdrasilTypes"
    elementTypeClass = "yggdrasil.psi.YggdrasilElementType"
    tokenTypeClass = "yggdrasil.psi.YggdrasilElementType"

    psiImplUtilClass = "yggdrasil.psi.node.YggdrasilPsiExtension"

    tokens = [
        // comment
        COMMENT_LINE = "Comment"
        COMMENT_BLOCK = "Comment Block"

        // literal
        URL = "Url"
        SYMBOL    = "Symbol"
        ESCAPED   = "\escaped"
        KW_BOOLEAN = "true|false"
        KW_ANY = "<<ANY>>"
        INTEGER = "<<INTEGER>>"

        REFERENCE = "$Symbol"

        STRING_QUOTE = "String Quote"
        STRING_CHAR = "String Character"
        STRING_ESCAPE = "String Escaped"
        SELECTION_LINE = "SELECTION_LINE"


        KW_GRAMMAR = "grammar"
        KW_GROUP = "group"
        KW_CLASS = "class"
        KW_UNION = "union"
        KW_CLIMB = "climb"
        KW_IMPORT = "import"
        KW_AS = "as"
        KW_MACRO = "macro"

		VERSION = "<<semver>>"
        PARENTHESIS_L = '('
        PARENTHESIS_R = ')'
        BRACKET_L = '['
        BRACKET_R = ']'
        BRACE_L = '{'
        BRACE_R = '}'
        ANGLE_L = '<'
        ANGLE_R = '>'
        ACCENT = '^'
        EQ = '='
        COLON = ':'
        SEMICOLON = ';'
        COMMA = ','
        DOLLAR = '$'
        DOT = '.'
        STAR = '*'
        AT = '@'
        TO = "->"
        HYPHEN = "-"
        SLASH = '/'
        OP_OR = '|'
        OP_CONCAT = '~'
        PLACE_HOLDER = "_"
//      SPACE='regexp:\s+'
//      ANY = 'regexp:.'

    ]
}

// https://github.com/bytecodealliance/fluent/blob/master/spec/fluent.ebnf
root ::= statements*
private statements ::=
    grammar
  | class
  | union
  | group
  | SEMICOLON
// === grammar statement ===
grammar ::= annotations KW_GRAMMAR identifier BRACE_L BRACE_R {
	pin = 2
    mixin = "yggdrasil.psi.mixin.MixinGrammar"
}
annotations ::= modifiers?
modifiers   ::= identifier+;
// === class statement ===
class  ::= annotations KW_CLASS identifier class-body {
    pin = 2
    mixin = "yggdrasil.psi.mixin.MixinClass"
}
class-body ::= BRACE_L class-term* BRACE_R;
class-term ::= expression;
// === union statement ===
union  ::= annotations KW_UNION identifier union-body {
    pin = 2
    mixin = "yggdrasil.psi.mixin.MixinUnion"
}
union-body ::= BRACE_L union-term* BRACE_R;
union-term ::= OP_OR expression;
// === group statement ===
group  ::= annotations KW_GROUP SYMBOL {
    pin = 2
    mixin = "yggdrasil.psi.mixin.MixinGroup"
}

expression ::=
    expression_group
  | expression-or
expression_group ::= PARENTHESIS_L OP_OR? expression PARENTHESIS_R {
    extends = expression
}
expression-or ::= expression OP_OR expression {
//    mixin = "yggdrasil.psi.mixin.MixinOr"
    extends = expression
}
expression-concat ::= expression-unary OP_CONCAT expression-unary {
//    mixin = "yggdrasil.psi.mixin.MixinOr"
    extends = expression
}
expression-unary ::= expression-atom STAR* {
    extends = expression
}
expression-atom ::= identifier | category | regex | range {
    extends = expression
}


category ::= escape (BRACE_L identifier (EQ identifier)? BRACE_R)? {

}
escape   ::= ESCAPED

range    ::= BRACE_L COMMA? BRACE_R
           | BRACE_L range-lower COMMA? BRACE_R
           | BRACE_L COMMA range-upper BRACE_R
           | BRACE_L range-upper COMMA range-upper BRACE_R
range-upper ::= INTEGER;
range-lower ::= INTEGER;


regex ::= SYMBOL {

}

pair ::= key COLON value;
key ::= identifier;

value ::= identifier | ESCAPED;


number ::= INTEGER {
//    mixin = "yggdrasil.psi.mixin.MixinNumber"
}
string ::= INTEGER {
    mixin = "yggdrasil.psi.mixin.MixinString"
}


/* Literals */

/* Identifier */
organization-name   ::= SYMBOL | ESCAPED;
module-name         ::= SYMBOL | ESCAPED;
interface-name      ::= SYMBOL | ESCAPED;
alias-name          ::= SYMBOL | ESCAPED;
semantic-number     ::= SYMBOL | ESCAPED;


identifier          ::= SYMBOL;
