namespace legion;

function fibonacci() -> Iterator⟨Integer⟩ {
    let mut a = 0;
    let mut b = 1;
    while true {
        yield b
        b = b + a
        a = b - a
    }
}

self.word ?= b"Hello, World!"



generic T, E { }
extends Result⟨T, E⟩: Perform {
    perform(self) -> T / E {
        match self {
            case Success(s): s
            case Failure(e): raise e
        }
    }
}

generic T {}
extends Option⟨T⟩: Perform {
    perform(self) -> T / null {
        match self {
            case  Some(s): s
            case None: raise null
        }
    }
}



if let Some(a) = b {
    print(1)
}

if a < 0 {
    print(-1)
}
else {
    print(0)
}



function main()  {
    for i in fibonacci() {
        if (i > 10) {
            break;
        }
        print(i)
    }
}


#mut #async
function `function`() {
    return 1;
}
~
function function_cps(async) {
    return async(1);
}

@async {

}