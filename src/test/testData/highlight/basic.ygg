grammar ygg  {

}

// Import the preclassined types,
// Otherwise the `String` type of each language will be used directly to represent the atomic expression
import "path/literal_types.toml" {

}


// right now, first rule will become entry point
#main
class Program {
    Statement*
}


// `#` will generate named bindings for languages that do not support union type, such as rust
// Union type will be used directly in other languages that support union type, such as ts, scala
// Note that compared to ANTLR, this is not mandatory, but the same name is also forbidden.
// If not specified, a name like `AuxVariant1` will be generated.
union Statement {
    | GrammarStatement   #Grammar
    | FragmentStatement  #Fragment
    | IgnoreStatement    #Ignore
    | ImportStatement    #Import
    | AssignStatement    #Assign
}

//* grammar tsg
//* grammar tsg {"*.tsg", }
class GrammarStatement {
    "grammar" Identifier _grammar_exts? eos?
}

class _GrammarExts {
    "{" @interval(extensions:String, ",", true)? "}"
}

class ImportStatement {
    | "import" (path:StringLiteral) ("as" id)?       #FromPath
    | "import" (path:StringLiteral) _ImportSelected  #FromPathItems
}

class _ImportSelected {
    '{' @join(items:ImportItem, ',')? '}'
}

class ImportItem {
    symbol:Identifier (@case_insensitive("as") alias:Identifier)?
}

#priority
union Expression {
    | x:Self y:Self       #Concat
    | x:Self '~' y:Self   #ConcatSoft
    | x:Self '|' y:Self   #Choice
    | '(' '|'? x:Self ')' #Group
    | x:_Atom             #Atom
}

class _TagName {
    "#" (name:Identifier) (mode:[!_^]) (name:id)
}

// `_` inline a item even if it not mark as automatic inline
union _Atom {
    | Identifier
    | String
    | unsigned    #Integer
    | regex
    | macro_call
}


class Boolean -> String {
    "true" | "false"
}

#atomic
class Identifier -> String {
    ("_" | XID_START) XID_CONTINUE*
}

#check
class WHITESPACE {

}

#check
class COMMENT {

}